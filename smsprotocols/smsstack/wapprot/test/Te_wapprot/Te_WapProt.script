// Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
// Te_WapProtSuite.script
// 
//

ced -i z:\TestData\configs\WapProtSuite\WapProtSuite.cfg ced.log

//delete any existing config.txt
RUN_UTILS  MakeReadWrite c:\config.txt
RUN_UTILS  DeleteFile c:\config.txt

//copy our config file
RUN_UTILS copyfile z:\testdata\configs\wapprotsuite\config.txt c:\config.txt
RUN_UTILS  MakeReadWrite c:\config.txt

LOAD_SUITE TE_WapProt

START_TESTCASE SMS-SMSStack-NA-8000
//!@SYMTestCaseID SMS-SMSStack-NA-8000
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_1
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 1
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_1 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep1

END_TESTCASE SMS-SMSStack-NA-8000

START_TESTCASE SMS-SMSStack-NA-8001
//!@SYMTestCaseID SMS-SMSStack-NA-8001
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_2
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 2
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_2 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep2

END_TESTCASE SMS-SMSStack-NA-8001

START_TESTCASE SMS-SMSStack-NA-8002
//!@SYMTestCaseID SMS-SMSStack-NA-8002
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_3
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 3
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_3 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep3

END_TESTCASE SMS-SMSStack-NA-8002

START_TESTCASE SMS-SMSStack-NA-8003
//!@SYMTestCaseID SMS-SMSStack-NA-8003
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_4
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 4
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_4 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep4

END_TESTCASE SMS-SMSStack-NA-8003

START_TESTCASE SMS-SMSStack-NA-8004
//!@SYMTestCaseID SMS-SMSStack-NA-8004
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_5
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 5
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 400 TE_WapProt  IoctlStep_5 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep5

END_TESTCASE SMS-SMSStack-NA-8004

START_TESTCASE SMS-SMSStack-NA-8005
//!@SYMTestCaseID SMS-SMSStack-NA-8005
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_6
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 6
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_6 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep6

END_TESTCASE SMS-SMSStack-NA-8005

START_TESTCASE SMS-SMSStack-NA-8006
//!@SYMTestCaseID SMS-SMSStack-NA-8006
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_7
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep_7
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_7 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep7

END_TESTCASE SMS-SMSStack-NA-8006

START_TESTCASE SMS-SMSStack-NA-8007
//!@SYMTestCaseID SMS-SMSStack-NA-8007
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_8
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 8
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_8 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep8

END_TESTCASE SMS-SMSStack-NA-8007

START_TESTCASE SMS-SMSStack-NA-8008
//!@SYMTestCaseID SMS-SMSStack-NA-8008
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep 9
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep_9
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_9 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep9

END_TESTCASE SMS-SMSStack-NA-8008

START_TESTCASE SMS-SMSStack-NA-8009
//!@SYMTestCaseID SMS-SMSStack-NA-8009
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_10
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 10
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_10 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep10

END_TESTCASE SMS-SMSStack-NA-8009

START_TESTCASE SMS-SMSStack-NA-8010
//!@SYMTestCaseID SMS-SMSStack-NA-8010
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_11
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 11
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_11 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep11

END_TESTCASE SMS-SMSStack-NA-8010

START_TESTCASE SMS-SMSStack-NA-8011
//!@SYMTestCaseID SMS-SMSStack-NA-8011
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_12
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 12
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_12 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep12

END_TESTCASE SMS-SMSStack-NA-8011

START_TESTCASE SMS-SMSStack-NA-8012
//!@SYMTestCaseID SMS-SMSStack-NA-8012
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_13
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 13
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_13 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep13

END_TESTCASE SMS-SMSStack-NA-8012

START_TESTCASE SMS-SMSStack-NA-8013
//!@SYMTestCaseID SMS-SMSStack-NA-8013
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_14
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 14
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_14 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep14

END_TESTCASE SMS-SMSStack-NA-8013

START_TESTCASE SMS-SMSStack-NA-8015
//!@SYMTestCaseID SMS-SMSStack-NA-8015
//!@SYMREQ DEF077494 
//!@SYMTestCaseDesc IoctlStep_15
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 15   
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_15 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep15

END_TESTCASE SMS-SMSStack-NA-8015

START_TESTCASE SMS-SMSStack-NA-8014
//!@SYMTestCaseID SMS-SMSStack-NA-8014
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc IoctlStep_16
//!@SYMTestPriority critical
//!@SYMTestActions IoctlStep 16
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  BackupRestoreStep z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep16

END_TESTCASE SMS-SMSStack-NA-8014

START_TESTCASE                 SMS-SMSStack-NA-8017
//! @SYMTestCaseID               SMS-SMSStack-NA-8017
//! @SYMTestCaseDesc             Sends a 7_Bit business card. Using IOCTL query SMS transport parameters
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Send a business card
//!                              3. Issue Ioctl for getting both the sms parameter length and sms parameter
//!                              4. Internalise the sms data and check values
//!                              5. Close the socket
//!@SYMTestExpectedResults Check on values as expected
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_17 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep1

END_TESTCASE SMS-SMSStack-NA-8017


START_TESTCASE                 SMS-SMSStack-NA-8018
//! @SYMTestCaseID               SMS-SMSStack-NA-8018
//! @SYMTestCaseDesc             Sends a 7-Bit calendar entry (two segments). Using IOCTL query SMS transport parameters.
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Send a calendar entry
//!                              3. Issue Ioctl for getting both the sms parameter length and sms parameter
//!                              4. Internalise the sms data and check values
//!                              5. Close the socket
//!@SYMTestExpectedResults Check on values as expected
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_18 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep2

END_TESTCASE SMS-SMSStack-NA-8018


START_TESTCASE                 SMS-SMSStack-NA-8019
//! @SYMTestCaseID               SMS-SMSStack-NA-8019
//! @SYMTestCaseDesc             Send/receive one 7-Bit two segments message and one 7-Bit one segment message
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Send a calendar entry
//!                              3. Send a business card
//!                              4. Issue Ioctl for getting both the sms parameter length and sms parameter of first message
//!                              5. Internalise the sms data and check values
//!                              6. Receive the first message and confirm the receipt of the message
//!                              7. Issue Ioctl for getting both the sms parameter length and sms parameter of second message
//!                              8. Internalise the sms data and check values
//!                              9. Receive the second message and confirm the receipt of the message
//!                              10. Close the socket
//!@SYMTestExpectedResults Check on values as expected
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_19 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep3

END_TESTCASE SMS-SMSStack-NA-8019


START_TESTCASE                 SMS-SMSStack-NA-8020
//! @SYMTestCaseID               SMS-SMSStack-NA-8020
//! @SYMTestCaseDesc             Simulating client crash conditions with 7bit message. Using IOCTL query SMS transport parameters.
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Send a business card
//!                              3. Issue Ioctl for getting both the sms parameter length and sms parameter
//!                              4. Internalise the sms data and check values
//!                              5. Close socket
//!                              6. Open the socket
//!                              7. Issue Ioctl for getting the sms parameter length and sms parameter
//!                              8. Internalise the sms data and check values
//!                              9. Close the socket
//!@SYMTestExpectedResults Check on values as expected
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_20 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep4

END_TESTCASE SMS-SMSStack-NA-8020


START_TESTCASE                 SMS-SMSStack-NA-8021
//! @SYMTestCaseID               SMS-SMSStack-NA-8021
//! @SYMTestCaseDesc             Simulating client crash conditions with 8bit push message. Using IOCTL query SMS transport parameters.
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Push a 8 bit business card
//!                              3. Issue Ioctl for getting both the sms parameter length and sms parameter
//!                              4. Internalise the sms data and check values
//!                              5. Close socket
//!                              6. Open the socket
//!                              7. Issue Ioctl for getting both the sms parameter length and sms parameter
//!                              8. Internalise the sms data and check values
//!                              9. Close the socket
//!@SYMTestExpectedResults Check on values as expected
//!@SYMTestType CT
RUN_TEST_STEP 400 TE_WapProt  IoctlStep_21 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep5

END_TESTCASE SMS-SMSStack-NA-8021


START_TESTCASE                 SMS-SMSStack-NA-8022
//! @SYMTestCaseID               SMS-SMSStack-NA-8022
//! @SYMTestCaseDesc             Push Message (8-Bit). Using IOCTL query SMS transport parameters
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Push a 8-Bit business card
//!                              3. Issue Ioctl for getting both the sms parameter length and sms parameter
//!                              4. Internalise the sms data and check values
//!                              5. Close the socket
//!@SYMTestExpectedResults Check on values as expected
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_22 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep7

END_TESTCASE SMS-SMSStack-NA-8022


START_TESTCASE                 SMS-SMSStack-NA-8023
//! @SYMTestCaseID               SMS-SMSStack-NA-8023
//! @SYMTestCaseDesc             Two Push Messages (8-Bit). Using IOCTL query SMS transport parameters
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Push a 8-Bit calendar entry and a 8-Bit business card
//!                              3. Issue Ioctl for getting both the sms parameter length and sms parameter of first message
//!                              4. Internalise the sms data and check values
//!                              5. Receive the first message and confirm the receipt of the message
//!                              6. Issue Ioctl for getting both the sms parameter length and sms parameter of second message
//!                              7. Internalise the sms data and check values
//!                              8. Receive the second message and confirm the receipt of the message
//!                              9. Close the socket
//!@SYMTestExpectedResults Check on values as expected
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_23 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep8

END_TESTCASE SMS-SMSStack-NA-8023


START_TESTCASE                 SMS-SMSStack-NA-8024
//! @SYMTestCaseID               SMS-SMSStack-NA-8024
//! @SYMTestCaseDesc             Test Cancel IOCTL
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Push a 8-Bit message
//!                              3. Issue Ioctl for getting the sms parameter
//!                              4. Issue Cancel Ioctl
//!                              5. Check if the outstanding IOCTL has been cancelled
//!                              6. Close the socket
//!@SYMTestExpectedResults IOCTL successfully cancelled
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_24 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep11

END_TESTCASE SMS-SMSStack-NA-8024


START_TESTCASE                 SMS-SMSStack-NA-8025
//! @SYMTestCaseID               SMS-SMSStack-NA-8025
//! @SYMTestCaseDesc             Test issue IOCTL without SetOption NewStyleClient
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Issue Ioctl for getting the sms parameter which should fail
//!                              3. Close the socket
//!@SYMTestExpectedResults Issue of Ioctl should fail
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_25 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep12

END_TESTCASE SMS-SMSStack-NA-8025


START_TESTCASE                 SMS-SMSStack-NA-8026
//! @SYMTestCaseID               SMS-SMSStack-NA-8026
//! @SYMTestCaseDesc             Sends a 8-Bit calendar entry using IOCTL(two segments)
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket
//!                              2. Push a 8-Bit calendar entry
//!                              3. Issue Ioctl for getting both the sms parameter length and sms parameter
//!                              4. Internalise the sms data and check values
//!                              5. Close the socket
//!@SYMTestExpectedResults Check on values as expected
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_26 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep13

END_TESTCASE SMS-SMSStack-NA-8026

START_TESTCASE                 SMS-SMSStack-NA-8027
//! @SYMTestCaseID               SMS-SMSStack-NA-8027
//! @SYMTestCaseDesc             Sends a 7_Bit business card. Issue both a get length and get message perameters to IOCTL
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket in a separate thread
//!                              2. Send a business card
//!                              3. Issue Ioctl for getting the length
//!                              4. Issue Ioctl for getting the sms parameter
//!                              5. Check that a panic has occurred
//!                              6. Close the socket
//! @SYMTestExpectedResults      A panic should occur as Ioctl is in use already
//! @SYMTestType                 CT
RUN_TEST_STEP 100 TE_WapProt  IoctlStep_27 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep1

END_TESTCASE SMS-SMSStack-NA-8027

START_TESTCASE                 SMS-SMSStack-NA-8028
//! @SYMTestCaseID               SMS-SMSStack-NA-8028
//! @SYMTestCaseDesc             Sends a 7_Bit business card. Issue a get message parameters to IOCTL without correct platform security
//! @SYMCR                    CR0929
//! @SYMTestPriority             High
//! @SYMTestActions              1. Define and open the socket in a separate thread
//!                              2. Send a business card
//!                              3. Issue Ioctl for getting the sms parameter
//!                              4. Check that an error of KErrPermissionDenied has occurred
//!                              5. Close the socket
//! @SYMTestExpectedResults      A error of KErrPermissionDenied should occur
//! @SYMTestType                 CT

RUN_PROGRAM -1 setcap.exe TE_WapProt.exe 1AC20 TE_WapProt_cap28.exe
LOAD_SUITE TE_WapProt_cap28
RUN_TEST_STEP 100 TE_WapProt_cap28 IoctlStep_28 z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep1

END_TESTCASE SMS-SMSStack-NA-8028

START_TESTCASE SMS-WAPPROT-0130
//!@SYMTestCaseID SMS-WAPPROT-0130
//!@SYMREQ DEF118285
//!@SYMTestCaseDesc Sends a 7bit message with the @ character.
//!@SYMTestPriority Critical
//!@SYMTestActions Send a 7bit message with the @ character and check it is correctly received.
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  Test7BitBusinessCardWithEmail z:\testdata\configs\WapProtSuite\WapProtSuite.ini Sending7BitBusinessCardWithEmailWAP
END_TESTCASE SMS-WAPPROT-0130

START_TESTCASE SMS-WAPPROT-0132
//!@SYMTestCaseID SMS-WAPPROT-132
//!@SYMREQ REQ0000
//!@SYMTestCaseDesc TKAO-7SNAYK
//!@SYMTestPriority critical
//!@SYMTestActions Refer to entry in TMS 
//!@SYMTestExpectedResults Pass
//!@SYMTestType CT
RUN_TEST_STEP 100 TE_WapProt  TestWapDatagramSegmentContainingNoData z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep17_TestWapDatagramSegmentContainingNoData
END_TESTCASE SMS-WAPPROT-0132

//Status reports

ced -i z:\TestData\configs\WapProtSuite\StatusReportsRequested.cfg ced.log

// Regression test cases added to validate existing SMART and WapDatagram code

START_TESTCASE SMS-WAPPROT-0126
//!@SYMTestCaseID SMS-WAPPROT-0126	
//!@SYMFssID CR0205	
//!@SYMTestPriority High
//!@SYMTestCaseDesc Send 7 bit single PDU message as a SMART message.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (3)
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message
//    5. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY with PDU = PDU(900).
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending7BitSinglePDUSMART

END_TESTCASE SMS-WAPPROT-0126

START_TESTCASE SMS-WAPPOT-0081
//!@SYMTestCaseID SMS-WAPPOT-0081	
//!@SYMFssID CR0205	
//!@SYMTestPriority Critical
//!@SYMTestCaseDesc Send 7 bit single PDU WAPDatagram message with COMM DB configured for status reports and socket not configured for last segment.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (3)
//    3. Set the scheme to TSmsStatusReportScheme::ETPSRRScheme and set the option off.
//    4. Send the message and check request completes KErrNone 
//    5. Delete the message
//    6. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY with PDU = PDU(57) which contains TP-SRR scheme.
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending7BitSinglePDUWAP

END_TESTCASE SMS-WAPPOT-0081

START_TESTCASE SMS-WAPPROT-0128
//!@SYMTestCaseID SMS-WAPPROT-0128	
//!@SYMFssID CR0205	
//!@SYMTestPriority High
//!@SYMTestCaseDesc Send 8 bit single PDU message as a SMART message.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (3), will default to SMART
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message
//    5. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY with PDU = PDU(902).
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending8BitSinglePDUSMART

END_TESTCASE SMS-WAPPROT-0128

START_TESTCASE SMS-WAPPROT-0129
//!@SYMTestCaseID SMS-WAPPROT-0129	
//!@SYMFssID CR0205	
//!@SYMTestPriority High
//!@SYMTestCaseDesc Send 8 bit single PDU message as a WAP Datagram message.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (3)
//    3. Set the message to a WAPDatagram using SetOpt on the socket.
//    4. Send the message and check request completes KErrNone 
//    5. Delete the message
//    6. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY with PDU = PDU(903).
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending8BitSinglePDUWAP

END_TESTCASE SMS-WAPPROT-0129

START_TESTCASE SMS-WAPPROT-0085
//!@SYMTestCaseID SMS-WAPPROT-0085	
//!@SYMFssID CR0205	
//!@SYMTestPriority Critical
//!@SYMTestCaseDesc Send multiple 7 bit PDU WAP message with COMM DB set and socket not configured for last segment
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (4)
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message.
//    5. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY PDU = PDU(61) which contains TP-SRR scheme and bit is set in every segment.
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending7BitMultiplePDU

END_TESTCASE SMS-WAPPROT-0085

START_TESTCASE SMS-WAPPROT-0087
//!@SYMTestCaseID SMS-WAPPROT-0087	
//!@SYMFssID CR0205	
//!@SYMTestPriority Critical
//!@SYMTestCaseDesc Send 8 bit multiple PDU WAP message with COMM DB set and socket not configured for last segment
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (4)
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message
//    5. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY PDU = PDU(63) which contains TP-SRR scheme and bit is set in every segment.
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending8BitMultiplePDU

END_TESTCASE SMS-WAPPROT-0087

START_TESTCASE SMS-WAPPROT-0083
//!@SYMTestCaseID SMS-WAPPROT-0083	
//!@SYMFssID CR0205	
//!@SYMTestPriority Medium
//!@SYMTestCaseDesc Send 7 bit single PDU WAP message with COMM DB set for status reports and socket configured to last segment.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (3)
//    3. Set the scheme to TSmsStatusReportScheme::ETPSRRScheme and configure the socket to last segment only.
//    4. Send the message and check request completes KErrNone 
//    5. Delete the message
//    6. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY with PDU = PDU(57) which contains TP-SRR bit set.
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReportsWithOption z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending7BitSinglePDUWAPWithOption

END_TESTCASE SMS-WAPPROT-0083

START_TESTCASE SMS-WAPPROT-0086
//!@SYMTestCaseID SMS-WAPPROT-0086	
//!@SYMFssID CR0205	
//!@SYMTestPriority Critical
//!@SYMTestCaseDesc Send 7 bit multiple PDU WAP message with COMM DB set and socket configured for last segment
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (4)
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message.
//    5. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY PDU = PDU(62) which contains TPSRR scheme and set in every segment.
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReportsWithOption z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending7BitMultiplePDUWithOption

END_TESTCASE SMS-WAPPROT-0086

START_TESTCASE SMS-WAPPROT-0088
//!@SYMTestCaseID SMS-WAPPROT-0088	
//!@SYMFssID CR0205	
//!@SYMTestPriority Critical
//!@SYMTestCaseDesc Send 8 bit multiple PDU WAP message with COMM DB set and socket configured for last segment
//!@SYMTestActions
//    1. Mark the heap
//    2. Create the WAP message with test data (4)
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message
//    5. Unmark the heap
//!@SYMTestExpectedResults The message sent is verified by SimTSY PDU = PDU(64) which contains TPSRR scheme but only the last segment bit is set.
RUN_TEST_STEP 100 TE_WapProt TestRequestingStatusReportsWithOption z:\testdata\configs\WapProtSuite\WapStatusReports.ini Sending8BitMultiplePDUWithOption

END_TESTCASE SMS-WAPPROT-0088

START_TESTCASE SMS-WAPPROT-0121
//!@SYMTestCaseID SMS-WAPPROT-0121	
//!@SYMFssID CR0205	
//!@SYMTestPriority Medium
//!@SYMTestCaseDesc Receive "completed" status report for 7 bit single PDU WAP message.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create WAP message with test data (5).  Ensure Comm DB is requesting  status reports.
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message
//    5. Receive "completed" status report - PDU(162)
//    6. Unmark the heap
//!@SYMTestExpectedResults A status report is returned to the client, and the status is "completed".
RUN_TEST_STEP 100 TE_WapProt TestReceivingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini ReceiveStatusReportSinglePDU7BitSmart

END_TESTCASE SMS-WAPPROT-0121

START_TESTCASE SMS-WAPPROT-0122
//!@SYMTestCaseID SMS-WAPPROT-0122	
//!@SYMFssID CR0205	
//!@SYMTestPriority Medium
//!@SYMTestCaseDesc Receive "completed" status reports for a multiple 7 bit PDU WAP message.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create WAP message with test data (6).  Ensure Comm DB is requesting  status reports.
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message
//    5. Receive "completed" status reports - PDU(163-166)
//    6. Unmark the heap
//!@SYMTestExpectedResults A status report is returned on receiving the final PDU; and the status is "completed".
RUN_TEST_STEP 100 TE_WapProt TestReceivingStatusReportsSevenBitMultiplePDUs z:\testdata\configs\WapProtSuite\WapStatusReports.ini ReceiveStatusReportMultiple7BitSmart

END_TESTCASE SMS-WAPPROT-0122

START_TESTCASE SMS-WAPPROT-0123
//!@SYMTestCaseID SMS-WAPPROT-0123	
//!@SYMFssID CR0205	
//!@SYMTestPriority High
//!@SYMTestCaseDesc Receive "completed" status report for 8 bit single PDU WAP message.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create WAP message with test data (5).  Ensure Comm DB is requesting  status reports.
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message
//    5. Receive "completed" status report - PDU(167)
//    6. Unmark the heap
//!@SYMTestExpectedResults A status report is returned to the client, and the status is "completed".
RUN_TEST_STEP 100 TE_WapProt TestReceivingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini ReceiveStatusReportSinglePDU8BitWAP

END_TESTCASE SMS-WAPPROT-0123

START_TESTCASE SMS-WAPPROT-0124
//!@SYMTestCaseID SMS-WAPPROT-0124	
//!@SYMFssID CR0205	
//!@SYMTestPriority High
//!@SYMTestCaseDesc Receive "completed" status reports for a multiple 8 bit PDU WAP message.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create WAP message with test data (6).  Ensure Comm DB is requesting  status reports.
//    3. Send the message and check request completes KErrNone 
//    4. Delete the message
//    5. Receive "completed" status reports - PDU(168-170)
//    6. Unmark the heap
//!@SYMTestExpectedResults A status report is returned on receiving the final PDU; and the status is "completed".
RUN_TEST_STEP 100 TE_WapProt TestReceivingStatusReports z:\testdata\configs\WapProtSuite\WapStatusReports.ini ReceiveStatusReportMultiplePDU8BitWAP

END_TESTCASE SMS-WAPPROT-0124

START_TESTCASE SMS-WAPPROT-0125
//!@SYMTestCaseID SMS-WAPPROT-0125	
//!@SYMFssID CR0205	
//!@SYMTestPriority High
//!@SYMTestCaseDesc Receive "completed" status report for a multiple 8 bit PDU WAP message for the last PDU only.
//!@SYMTestActions
//    1. Mark the heap
//    2. Create WAP message with test data (6).  Ensure Comm DB is requesting status reports.
//    3. Set the socket option for TPSRR scheme.
//    4. Send the message and check request completes KErrNone 
//    5. Delete the message
//    6. Receive "completed" status report for last PDU only - PDU(171)
//    7. Unmark the heap
//!@SYMTestExpectedResults A status report is returned on receiving the final PDU; and the status is "completed".
RUN_TEST_STEP 100 TE_WapProt TestReceivingStatusReportsWithOption z:\testdata\configs\WapProtSuite\WapStatusReports.ini ReceiveStatusReportLastPDUMultiple8BitWAP
END_TESTCASE SMS-WAPPROT-0125

START_TESTCASE SMS-WAPPROT-0127
//!@SYMTestCaseID SMS-WAPPROT-0127
//!@SYMDEF INC108190
//!@SYMTestPriority High
//!@SYMTestCaseDesc Receive a VCard via an enumerate.
//!@SYMTestActions A VCard is on the SIM and enumerated.
//!@SYMTestExpectedResults It should be received as a VCard and not as text.
RUN_TEST_STEP 100 TE_WapProt TestEnumeratingVCard z:\testdata\configs\WapProtSuite\WapProtSuite.ini EnumeratingVCard
END_TESTCASE SMS-WAPPROT-0127

START_TESTCASE SMS-WAPPROT-0131
//!@SYMTestCaseID SMS-WAPPROT-0131
//!@SYMDEF INC123144
//!@SYMTestPriority High
//!@SYMTestCaseDesc Attempt to send oversized messages and check that the stack does not panic.
//!@SYMTestActions Send a messgae bigger than the maximum datagram size and the MBuf maximum size.
//!@SYMTestExpectedResults The stack should return KErrTooBig.
RUN_TEST_STEP 100 TE_WapProt TestOversizedDatagram z:\testdata\configs\WapProtSuite\WapProtSuite.ini TestStep1
END_TESTCASE SMS-WAPPROT-0131
